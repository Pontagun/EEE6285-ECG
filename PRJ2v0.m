%% PRELIMINAY VERSION OF PROJECT2.m SCRIPT
%
% This script calls function BOOKpreproc 
% the final version MUST CALL the student's beatpreproc
%
close all; clear all
load('EKGPRJ2.mat');

% TRANSFORM ALL THE COLUMNS OF EKGN, EKGPVC and EKGLBBB
% one at a time, using beatpreproc
% To generate the FEATURE MATRICES FEATN, FEATPVC, FESTLBBB


 % the first preprocessing is executed to find the length of the feat. vector
F = beatpreproc0( EKGN(:,1) );
f = length(F);  % Find the length of teh feat. vectors produced by beatpreproc

% Create and fill FEATN
FEATN = zeros(f,300);
for c = 1:300
	FEATN(:,c) = beatpreproc0( (EKGN(:,c)) );
end

% Create and fill FEATPVC
FEATPVC = zeros(f,300);
for c = 1:300
	FEATPVC(:,c) = beatpreproc0( (EKGPVC(:,c)) );
end

% Create and fill FEATLBBB
FEATLBBB = zeros(f,300);
for c = 1:300
	FEATLBBB(:,c) = beatpreproc0( (EKGLBBB(:,c)) );
end

% CONSOLIDATION OF THE 3 FEATURE MATRICES INTO MATRIX Inputs:

Inputs = [FEATN, FEATPVC, FEATLBBB];

% CREATION OF THE Targets MATRIX:
row300ones = ones(1,300); % creating a row with 300 ones in it.
% Create 300 columns for Class 1
T1 = zeros(3,300);
T1(1,:) = row300ones;
% Create 300 columns for Class 2
T2 = zeros(3,300);
T2(2,:) = row300ones;
% Create 300 columns for Class 3
T3 = zeros(3,300);
T3(3,:) = row300ones;
% Creating the matrix “Targets” by concatenation of T1, T2, T3
Targets = [T1 , T2 , T3];



% THE REST OF THIS SCRIPT IS DIRECTLY COPIED FROM
% EXERCISE 5.14 IN OUR TEXTBOOK
%  * EXCEPT *  THAT AFTER TRAINING IS COMPLETE
% I  SEPARTATED TRAIN, VAL and TEST inputs and targets
% to PLOT seaparate CONFUSION M. and ROC plots for each subset
% Make sure that the NAME of the INPUT MATRIX is Inputs
% Make sure that the NAME of the TARGET MATRIX is Targets
%  CHANGE THE STATEMENT " hiddenLayerSize = 35; AS NEEDED


%% CLASSIFACATION
% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by NPRTOOL
%
% Create a Pattern Recognition Network
hiddenLayerSize = 70;
net = patternnet(hiddenLayerSize);
% Set up Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;
% Train the Network
[net,tr] = train(net,Inputs,Targets);

% Test the Network
outputs = net(Inputs);
errors = gsubtract(Targets,outputs);
performance = perform(net,Targets,outputs);
% View the Network
view(net)
% Plots
figure, plotperform(tr)
figure, plottrainstate(tr)
figure, ploterrhist(errors)
%%
% One measure of how well the neural network has fit the data is the
% confusion plot. Here the confusion matrix is plotted across all samples.
%
% The confusion matrix shows the percentages of correct and incorrect
% classifications. Correct classifications are the green squares on the
% matrices diagonal. Incorrect classifications form the red squares.
%
% If the network has learned to classify properly, the percentages in the
% red squares should be very small, indicating few misclassifications.
%

% If this is not the case then further training, or training a network
% with more hidden neurons, would be advisable.

% figure, plotconfusion(Targets,outputs)


% SEPARATING THE TRAINING, VALIDATION & TESTING inputs and outputs
% Isolating TRAINING Inputs and targets
yTrn = net(Inputs(:,tr.trainInd));
tTrn = Targets(:,tr.trainInd);

% Isolating VALIDATION Inputs and targets
yVal = net(Inputs(:,tr.valInd));
tVal = Targets(:,tr.valInd);

% Isolating TESTING Inputs and targets
yTst = net(Inputs(:,tr.testInd));
tTst = Targets(:,tr.testInd);

% Overall inputs and targets
yAll = net(Inputs);
tAll = Targets;

% Create CONFUSION PLOTS for TRAINING, VALIDATION, TESTING and Overall
plotconfusion(tTrn, yTrn, 'Training', tVal, yVal, 'Validation', tTst, yTst, 'Test', tAll, yAll, 'Overall')

%%
% Another measure of how well the neural network has fit data is the
% receiver operating characteristic plot. This shows how the false
% positive and true positive rates relate as the thresholding of outputs
% is varied from 0 to 1.
%
% The farther left and up the line is, the fewer false positives need to
% be accepted in order to get a high true positive rate. The best
% classifiers will have a line going from the bottom left corner, to the
% top left corner, to the top right corner, or close to that.

% figure, plotroc(Targets,outputs)

% Create ROC PLOTS for TRAINING, VALIDATION, TESTING and Overall
figure, plotroc(tTrn, yTrn, 'Training', tVal, yVal, 'Validation', tTst, yTst, 'Test', tAll, yAll, 'Overall')

